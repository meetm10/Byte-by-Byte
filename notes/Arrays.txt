In computer programming, an array is a set of data elements stored under the same name. Arrays can be created to hold any type of data, and each element can be individually assigned and read. There can be arrays of numbers, characters, sentences, boolean values, and so on. Arrays might store vertex data for complex shapes, recent keystrokes from the keyboard, or data read from a file. For instance, an array can store five integers (1919, 1940, 1975, 1976, 1990), the years to date that the Cincinnati Reds won the World Series, rather than defining five separate variables. Let’s call this array “dates” and store the values in sequence. Array elements are numbered starting with zero, which may seem confusing at first but is an important detail for many programming languages. The first element is at position [0], the second is at [1], and so on. The position of each element is determined by its offset from the start of the array. The first element is at position [0] because it has no offset; the second element is at position [1] because it is offset one place from the beginning. The last position in the array is calculated by subtracting 1 from the array length. In this example, the last element is at position [4] because there are five elements in the array. Arrays can make the task of programming much easier. While it’s not necessary to use them, they can be valuable structures for managing data. Let’s begin with a set of data points to construct a bar chart. 
Arrays are classified as Homogeneous Data Structures because they store elements of the same type. They can store numbers, strings, boolean values (true and false), characters, objects, and so on. But once you define the type of values that your array will store, all its elements must be of that same type. You can’t “mix” different types of data. 
The amazing power of arrays comes from their efficiency to access values. This is achieved thanks to its grid-like structure. Let’s take a look at this in more detail.
When you create an array, you:
- Assign it to a variable.
- Define the type of elements that it will store. 
- Define its size (the maximum number of elements).
You use what it’s called an “index” (“indices” in plural) to access a value in an array. This is a number that refers to the location where the value is stored.
As you can see in the diagram below, the first element in the array is referred to using index 0. As you move further to the right, the index increases by one for each space in memory.
The general syntax to access an element is: <ArrayVariable>[<index>]
For example:
If your array is stored in the variable myArray and you want to access the first element (at index 0), you would use myArray[0]
To insert into arrays, we move all the elements located to the right of the insertion site, one index to the right. Element “a” will now be at index 1, element “b” will be at index 2 and so on. 
Now let’s say that you want to delete an element from the array. To maintain the efficiency of random access (being able to access the array through an index extremely fast) the elements must be stored in contiguous spaces of memory. You can’t just delete the element and leave that space empty. You should move the elements that come after the element that you want to delete one index the left. Deletion is very efficient when you remove the last element. Since you need to create a variable to keep track of the last index that contains elements (in the diagram above, index 3), you can directly remove that element using the index.
You have three options to find an element in an array:
If you know where it’s located, use the index.
If you don’t know where it’s located and your data is sorted, you can use algorithms to optimize your search, such as Binary Search.
If you don’t know where it’s located and your data is not sorted, you will need to search through every element in the array and check if the current element is the element you are looking for (please see the sequence of diagrams below ).
In Summary…
Arrays are extremely powerful data structures that store elements of the same type. The type of elements and the size of the array are fixed and defined when you create it.
Memory is allocated immediately after the array is created and it’s empty until you assign the values.
Their elements are located in contiguous locations in memory, so they can be accessed very efficiently (random access, O(1) = constant time) using indices.
Indices start at 0, not 1 like we are used to.
Inserting elements at the beginning or in the middle of the array involves moving elements to the right. If the array is full, creating a new, larger array (which is not very efficient). Inserting at the end of the array is very efficient, constant time O(1).
Removing elements from the beginning or from the middle of the array involves moving all the elements to the left to avoid leaving an empty space in memory. This guarantees that the elements are stored in contiguous spaces in memory. Removing at the end of the array is very efficient because you only delete the last element.
To find an element, you need to check the entire array until you find it. If the data is sorted, you can use algorithms such as Binary Search to optimize the process.
Programming with arrays. Before considering more examples, we consider a number of important characteristics of programming with arrays.

Zero-based indexing. We always refer to the first element of an array a[] as a[0], the second as a[1], and so forth. It might seem more natural to you to refer to the first element as a[1], the second value as a[2], and so forth, but starting the indexing with 0 has some advantages and has emerged as the convention used in most modern programming languages.
Array length. Once we create an array, its length is fixed. You can refer to the length of an a[] in your program with the code a.length. 
Memory representation. When you use new to create an array, Java reserves space in memory for it (and initializes the values). This process is called memory allocation.
Bounds checking. When programming with arrays, you must be careful. It is your responsibility to use legal indices when accessing an array element.
Setting array values at compile time. When we have a small number of literal values that we want to keep in array, we can initialize it by listing the values between curly braces, separated by a comma. For example, we might use the following code in a program that processes playing cards. 
In the previous section, wehard-coded the data asarray initializer values in the program itself. While thisapproachworks, it also creates a number of problems. First, the program will only graph theparticular set of raw data that it hard-codes, which makes it impossible to reuse the programfor other data sets. Second, changing the data values for later use would require repeated rewriting and recompiling of theprogram, which is unacceptably tedious.A better approach to thisdata management task is to separate the data from the program, storing the data in adatafile and the program in a program file, and designingthe program to read its data from the data file. With this approach, a single program can be used on multiple data files, and the data values can be changed and saved over time.Files are classified by the kind of data stored in them. Files that contain textual characters (such as the source code for programs or numbers entered with a text editor) are called text files. Filesthat contain non-textual characters (such as the binary code for a compiled program or control codes for a word processor file) are called binary files. This section discusses Processing’scapabilities for readingand writing text files.

